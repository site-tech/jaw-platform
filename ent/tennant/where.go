// Code generated by ent, DO NOT EDIT.

package tennant

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/site-tech/jaw-platform/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ExternalId applies equality check predicate on the "externalId" field. It's identical to ExternalIdEQ.
func ExternalId(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExternalId), v))
	})
}

// Cloud applies equality check predicate on the "cloud" field. It's identical to CloudEQ.
func Cloud(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCloud), v))
	})
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v uuid.UUID) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// ExternalIdEQ applies the EQ predicate on the "externalId" field.
func ExternalIdEQ(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExternalId), v))
	})
}

// ExternalIdNEQ applies the NEQ predicate on the "externalId" field.
func ExternalIdNEQ(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExternalId), v))
	})
}

// ExternalIdIn applies the In predicate on the "externalId" field.
func ExternalIdIn(vs ...string) predicate.Tennant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExternalId), v...))
	})
}

// ExternalIdNotIn applies the NotIn predicate on the "externalId" field.
func ExternalIdNotIn(vs ...string) predicate.Tennant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExternalId), v...))
	})
}

// ExternalIdGT applies the GT predicate on the "externalId" field.
func ExternalIdGT(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExternalId), v))
	})
}

// ExternalIdGTE applies the GTE predicate on the "externalId" field.
func ExternalIdGTE(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExternalId), v))
	})
}

// ExternalIdLT applies the LT predicate on the "externalId" field.
func ExternalIdLT(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExternalId), v))
	})
}

// ExternalIdLTE applies the LTE predicate on the "externalId" field.
func ExternalIdLTE(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExternalId), v))
	})
}

// ExternalIdContains applies the Contains predicate on the "externalId" field.
func ExternalIdContains(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExternalId), v))
	})
}

// ExternalIdHasPrefix applies the HasPrefix predicate on the "externalId" field.
func ExternalIdHasPrefix(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExternalId), v))
	})
}

// ExternalIdHasSuffix applies the HasSuffix predicate on the "externalId" field.
func ExternalIdHasSuffix(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExternalId), v))
	})
}

// ExternalIdEqualFold applies the EqualFold predicate on the "externalId" field.
func ExternalIdEqualFold(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExternalId), v))
	})
}

// ExternalIdContainsFold applies the ContainsFold predicate on the "externalId" field.
func ExternalIdContainsFold(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExternalId), v))
	})
}

// CloudEQ applies the EQ predicate on the "cloud" field.
func CloudEQ(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCloud), v))
	})
}

// CloudNEQ applies the NEQ predicate on the "cloud" field.
func CloudNEQ(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCloud), v))
	})
}

// CloudIn applies the In predicate on the "cloud" field.
func CloudIn(vs ...string) predicate.Tennant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCloud), v...))
	})
}

// CloudNotIn applies the NotIn predicate on the "cloud" field.
func CloudNotIn(vs ...string) predicate.Tennant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCloud), v...))
	})
}

// CloudGT applies the GT predicate on the "cloud" field.
func CloudGT(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCloud), v))
	})
}

// CloudGTE applies the GTE predicate on the "cloud" field.
func CloudGTE(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCloud), v))
	})
}

// CloudLT applies the LT predicate on the "cloud" field.
func CloudLT(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCloud), v))
	})
}

// CloudLTE applies the LTE predicate on the "cloud" field.
func CloudLTE(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCloud), v))
	})
}

// CloudContains applies the Contains predicate on the "cloud" field.
func CloudContains(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCloud), v))
	})
}

// CloudHasPrefix applies the HasPrefix predicate on the "cloud" field.
func CloudHasPrefix(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCloud), v))
	})
}

// CloudHasSuffix applies the HasSuffix predicate on the "cloud" field.
func CloudHasSuffix(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCloud), v))
	})
}

// CloudEqualFold applies the EqualFold predicate on the "cloud" field.
func CloudEqualFold(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCloud), v))
	})
}

// CloudContainsFold applies the ContainsFold predicate on the "cloud" field.
func CloudContainsFold(v string) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCloud), v))
	})
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v uuid.UUID) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v uuid.UUID) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountID), v))
	})
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...uuid.UUID) predicate.Tennant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAccountID), v...))
	})
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...uuid.UUID) predicate.Tennant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAccountID), v...))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Tennant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Tennant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// HasAccount applies the HasEdge predicate on the "account" edge.
func HasAccount() predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AccountTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AccountTable, AccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountWith applies the HasEdge predicate on the "account" edge with a given conditions (other predicates).
func HasAccountWith(preds ...predicate.Account) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AccountInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AccountTable, AccountColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tennant) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tennant) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tennant) predicate.Tennant {
	return predicate.Tennant(func(s *sql.Selector) {
		p(s.Not())
	})
}
