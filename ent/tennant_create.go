// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/site-tech/jaw-platform/ent/account"
	"github.com/site-tech/jaw-platform/ent/tennant"
	"github.com/google/uuid"
)

// TennantCreate is the builder for creating a Tennant entity.
type TennantCreate struct {
	config
	mutation *TennantMutation
	hooks    []Hook
}

// SetExternalId sets the "externalId" field.
func (tc *TennantCreate) SetExternalId(s string) *TennantCreate {
	tc.mutation.SetExternalId(s)
	return tc
}

// SetCloud sets the "cloud" field.
func (tc *TennantCreate) SetCloud(s string) *TennantCreate {
	tc.mutation.SetCloud(s)
	return tc
}

// SetAccountID sets the "account_id" field.
func (tc *TennantCreate) SetAccountID(u uuid.UUID) *TennantCreate {
	tc.mutation.SetAccountID(u)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TennantCreate) SetCreatedAt(t time.Time) *TennantCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TennantCreate) SetNillableCreatedAt(t *time.Time) *TennantCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TennantCreate) SetID(u uuid.UUID) *TennantCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TennantCreate) SetNillableID(u *uuid.UUID) *TennantCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// SetAccount sets the "account" edge to the Account entity.
func (tc *TennantCreate) SetAccount(a *Account) *TennantCreate {
	return tc.SetAccountID(a.ID)
}

// Mutation returns the TennantMutation object of the builder.
func (tc *TennantCreate) Mutation() *TennantMutation {
	return tc.mutation
}

// Save creates the Tennant in the database.
func (tc *TennantCreate) Save(ctx context.Context) (*Tennant, error) {
	var (
		err  error
		node *Tennant
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TennantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Tennant)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TennantMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TennantCreate) SaveX(ctx context.Context) *Tennant {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TennantCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TennantCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TennantCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tennant.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := tennant.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TennantCreate) check() error {
	if _, ok := tc.mutation.ExternalId(); !ok {
		return &ValidationError{Name: "externalId", err: errors.New(`ent: missing required field "Tennant.externalId"`)}
	}
	if _, ok := tc.mutation.Cloud(); !ok {
		return &ValidationError{Name: "cloud", err: errors.New(`ent: missing required field "Tennant.cloud"`)}
	}
	if _, ok := tc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "Tennant.account_id"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Tennant.created_at"`)}
	}
	if _, ok := tc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required edge "Tennant.account"`)}
	}
	return nil
}

func (tc *TennantCreate) sqlSave(ctx context.Context) (*Tennant, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tc *TennantCreate) createSpec() (*Tennant, *sqlgraph.CreateSpec) {
	var (
		_node = &Tennant{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tennant.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: tennant.FieldID,
			},
		}
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.ExternalId(); ok {
		_spec.SetField(tennant.FieldExternalId, field.TypeString, value)
		_node.ExternalId = value
	}
	if value, ok := tc.mutation.Cloud(); ok {
		_spec.SetField(tennant.FieldCloud, field.TypeString, value)
		_node.Cloud = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(tennant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := tc.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tennant.AccountTable,
			Columns: []string{tennant.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TennantCreateBulk is the builder for creating many Tennant entities in bulk.
type TennantCreateBulk struct {
	config
	builders []*TennantCreate
}

// Save creates the Tennant entities in the database.
func (tcb *TennantCreateBulk) Save(ctx context.Context) ([]*Tennant, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tennant, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TennantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TennantCreateBulk) SaveX(ctx context.Context) []*Tennant {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TennantCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TennantCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
