// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/site-tech/jaw-platform/ent/account"
	"github.com/site-tech/jaw-platform/ent/tennant"
	"github.com/google/uuid"
)

// Tennant is the model entity for the Tennant schema.
type Tennant struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ExternalId holds the value of the "externalId" field.
	ExternalId string `json:"externalId,omitempty"`
	// Cloud holds the value of the "cloud" field.
	Cloud string `json:"cloud,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID uuid.UUID `json:"account_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TennantQuery when eager-loading is set.
	Edges TennantEdges `json:"edges"`
}

// TennantEdges holds the relations/edges for other nodes in the graph.
type TennantEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TennantEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.Account == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tennant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tennant.FieldExternalId, tennant.FieldCloud:
			values[i] = new(sql.NullString)
		case tennant.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case tennant.FieldID, tennant.FieldAccountID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tennant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tennant fields.
func (t *Tennant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tennant.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case tennant.FieldExternalId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field externalId", values[i])
			} else if value.Valid {
				t.ExternalId = value.String
			}
		case tennant.FieldCloud:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cloud", values[i])
			} else if value.Valid {
				t.Cloud = value.String
			}
		case tennant.FieldAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value != nil {
				t.AccountID = *value
			}
		case tennant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryAccount queries the "account" edge of the Tennant entity.
func (t *Tennant) QueryAccount() *AccountQuery {
	return (&TennantClient{config: t.config}).QueryAccount(t)
}

// Update returns a builder for updating this Tennant.
// Note that you need to call Tennant.Unwrap() before calling this method if this Tennant
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tennant) Update() *TennantUpdateOne {
	return (&TennantClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Tennant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tennant) Unwrap() *Tennant {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tennant is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tennant) String() string {
	var builder strings.Builder
	builder.WriteString("Tennant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("externalId=")
	builder.WriteString(t.ExternalId)
	builder.WriteString(", ")
	builder.WriteString("cloud=")
	builder.WriteString(t.Cloud)
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", t.AccountID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tennants is a parsable slice of Tennant.
type Tennants []*Tennant

func (t Tennants) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
